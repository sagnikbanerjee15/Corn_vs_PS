#! /usr/bin/env python3

from argparse import RawTextHelpFormatter
from pprint import pformat

import math
import argparse
import logging
import os
import pprint
import sys
import re
import time
import multiprocessing
import random
import glob
import time
import subprocess



def parseCommandLineArguments():
    parser = argparse.ArgumentParser( prog = "compressDecompressAndAnalyzeResults", description = "Carry out all the analysis using this script", formatter_class = RawTextHelpFormatter )
    required_named = parser.add_argument_group( 'Required arguments' )
    optional_named = parser.add_argument_group( 'Optional arguments' )

    ##################################################################################################
    # Required arguments
    ##################################################################################################
    required_named.add_argument( "-pe_reads", "--pe_reads", help = "Enter the location of the PE reads", nargs = '+')
    required_named.add_argument( "-output_directory", "--output_directory", help = "Enter the name of the output directory. all analysis will be stored here. Please make sure you have sufficient space on your disk to reproduce all the analysis", required = True )
    required_named.add_argument( "-genome_references", "--genome_references", help = "Enter the genome references. Please make sure the contigs/scaffolds of each reference is present in a single file", nargs = '+')

    ##################################################################################################
    # Optional arguments
    ##################################################################################################
    optional_named.add_argument( "--cpu", "-cpu", help = "Enter the number of CPUs. Please note that all alignments will be conducted using a single CPU. This argument will control how many parallel alignments can be lanuched", default = 1 )
    optional_named.add_argument( "--temp_directory", "-temp_dir", help = "Enter a temporary directory. All files will be dumped in this directory to prevent the output directory to get crowded. Outputs and Error files will not be moved", default = None )
    optional_named.add_argument( "--transfer", "--transfer", help = "Keep moving intermediate files and folders from the output directory to the temp directory to reduce space consumption. Developed for Ceres architecture", action = "store_true")
    optional_named.add_argument( "--framework", "-fm", help = "Enter your choice of framework", choices = ["docker", "singularity"], default = "docker" )
    optional_named.add_argument( "--logfilename", "-logfilename", help = "Enter the name of the logfile" )

    ##################################################################################################
    # Suppressed arguments
    ##################################################################################################
    parser.add_argument( "--metadata_expanded", "-metadata_expanded", help = argparse.SUPPRESS )
    parser.add_argument( "--sra_list_to_be_downloaded", "-sra_list_to_be_downloaded", help = argparse.SUPPRESS )
    # Name of the logfile

    return parser.parse_args()


def runDockerCommand( logging, name, version, image_location, container_name, volumes, command , cpus = 1, memory = '1g' ):
    """
    Runs the command in a docker container
    """

    # Runs the main command
    docker_cmd = f" docker run "
    # docker_cmd += f" -ti "
    docker_cmd += f" --rm "
    docker_cmd += f" --cpus={cpus}"
    docker_cmd += f" --memory='{memory}'"
    # docker_cmd += f" --name {container_name}"
    for mapping in volumes:
        docker_cmd += f" -v {mapping}"
    docker_cmd += f" {image_location}:{version} "
    docker_cmd += f" bash -c '{command}'"
    logging.info( f"Running command - {docker_cmd}" )
    os.system( docker_cmd )

def runSingularityCommand( logging, name, version, image_location, container_name, volumes, command , cpus = 1, memory = '1g' ):
    """
    Runs the command in a Singularity container
    """

    # Runs the main command
    singularity_cmd = f" singularity exec  "
    # singularity_cmd += f" --hostname {container_name}"
    for mapping in volumes:
        singularity_cmd += f" -B {mapping}"
    singularity_cmd += f" {image_location} "
    singularity_cmd += f" bash -c \"{command}\" "
    os.system( singularity_cmd )
    logging.info( f"Running command - {singularity_cmd}" )

def configureLogger( options ):
    if os.path.exists( options.logfilename ) == True:
        os.system( f"rm -f {options.logfilename}" )
    logging.basicConfig( format = '%(asctime)s - %(message)s', datefmt = '%d-%b-%y %H:%M:%S', level = logging.DEBUG, filename = options.logfilename )

def main():
    options = parseCommandLineArguments()
    
    os.system(f"mkdir -p {options.output_directory}")
    
    if options.logfilename == None:
        options.logfilename = f"{options.output_directory}/progress.log"
        
    
    configureLogger( options )    
    logging.info( "Logger has been configured" )
    
    ################################################################################################################################################################################################################################################
    # Pull down docker or singularity images
    ################################################################################################################################################################################################################################################

    list_of_softwares_with_versions = {"samtools":"1.14",
                                       "star":"2.7.9a",
                                       "bwa":"0.7.17",
                                       "gffread":"0.12.1"}

    volumes_list = [f"{options.output_directory}:{options.output_directory}",
                    f"{options.temp_directory}:{options.temp_directory}"
                    ]
    
    for genome_reference in options.genome_references:
        genome_reference_directory = "/".join(genome_reference.split("/")[:-1])
        volumes_list.append(f"{genome_reference_directory}:{genome_reference_directory}")
        
    volumes_list = list(set(volumes_list))
    
    os.system( f"mkdir -p {options.output_directory}/singularity_images" )
    os.system( f"which docker > {options.output_directory}/find_docker" )
    os.system( f"which singularity > {options.output_directory}/find_singularity" )
    docker_installed = 1 if "Command not found" not in open( f"{options.output_directory}/find_docker", "r" ).read() else 0
    singularity_installed = 1 if "Command not found" not in open( f"{options.output_directory}/find_singularity", "r" ).read() else 0

    if docker_installed == 0 and singularity_installed == 0:
        print( "You need to have either docker or singularity installed" )
        sys.exit()

    framework_of_choice = ""
    if options.framework == "docker":
        if docker_installed == 1:
            framework_of_choice = "docker"
        else:
            framework_of_choice = "singularity"

    if options.framework == "singularity":
        if singularity_installed == 1:
            framework_of_choice = "singularity"
        else:
            framework_of_choice = "docker"
            
    if framework_of_choice == "docker":
        for software in list_of_softwares_with_versions:
            version = list_of_softwares_with_versions[software]
            os.system( f"docker pull ghcr.io/sagnikbanerjee15/docker_tools_and_pipelines/{software}:{version}" )
    else:
        for software in list_of_softwares_with_versions:
            version = list_of_softwares_with_versions[software]
            if os.path.exists(f"{options.output_directory}/singularity_images/{software}:{version}")==False:
                os.system( f"singularity pull {options.output_directory}/singularity_images/{software}:{version} docker://ghcr.io/sagnikbanerjee15/docker_tools_and_pipelines/{software}:{version}" )
    ################################################################################################################################################################################################################################################
    
    # Create output directory
    os.system(f"mkdir -p {options.output_directory}/star_indices")
    os.system(f"mkdir -p {options.output_directory}/alignments/")
    
    # Create temporary directory and subdirectories
    os.system(f"mkdir -p {options.temp_directory}/star_indices")
    os.system(f"mkdir -p {options.temp_directory}/alignments/")
    
    
    for genome_reference in options.genome_references:
        
        ################################################################################################################################################################################################################################################
        # Prepare STAR references
        ################################################################################################################################################################################################################################################
        
        if os.path.isdir(f"{options.output_directory}/star_index/{genome_reference.split('/')[-1]}") == False and os.path.isdir(f"{options.temp_directory}/star_indices/{genome_reference.split('/')[-1]}") == False:
            
            # Copy the genome reference to output directory
            cmd = f"cp {genome_reference} {options.output_directory}"
            os.system(cmd)
            
            # Calculate genome size and number of references
            number_of_references, total_length = 0, 0 
            fhr = open(f"{options.output_directory}/{genome_reference.split('/')[-1]}", "r")
            for line in fhr:
                if line[0]==">": 
                    number_of_references+=1
                    total_length+=len(fhr.readline().strip())
            fhr.close()
            
            cmd = ""
            cmd += f"STAR "
            cmd += f" --runMode genomeGenerate "
            cmd += f" --runThreadN {options.cpu} "
            cmd += f" --genomeFastaFiles {options.output_directory}/{genome_reference.split('/')[-1]} "
            cmd += f" --genomeDir {options.output_directory}/star_indices/{genome_reference.split('/')[-1]} "
            cmd += f" --genomeSAindexNbases {min(14, math.log2(total_length)/2 - 1)}"
            cmd += f" --genomeChrBinNbits {min(18, math.log2(total_length/number_of_references))}"
            cmd += f" 1> {options.output_directory}/star_indices/{genome_reference.split('/')[-1]}.output "
            cmd += f" 2> {options.output_directory}/star_indices/{genome_reference.split('/')[-1]}.error "
            if framework_of_choice == "docker":
                pass
            else:
                software = "star"
                version = list_of_softwares_with_versions[software]
                runSingularityCommand(logging, 
                                      "STAR", 
                                      version, 
                                      image_location = f"{options.output_directory}/singularity_images/{software}:{version}", 
                                      container_name = f"star_genomegenerate_{genome_reference.split('/')[-1]}", 
                                      volumes = volumes_list,
                                      command = cmd, 
                                      cpus = options.cpu, 
                                      memory = '50g')
            
            # Move the star index to the temp directory if a transfer is requested
            if (options.transfer):
                cmd = f"mv {options.output_directory}/star_indices/{genome_reference.split('/')[-1]} {options.temp_directory}/star_indices/"
                os.system(cmd)
                
        elif os.path.isdir(f"{options.output_directory}/star_index/{genome_reference.split('/')[-1]}") == False and os.path.isdir(f"{options.temp_directory}/star_indices/{genome_reference.split('/')[-1]}") == True:
            cmd = f"cp -r {options.temp_directory}/star_indices/{genome_reference.split('/')[-1]} {options.output_directory}/star_indices/"
            os.system(cmd)
        
        ################################################################################################################################################################################################################################################
        
        ################################################################################################################################################################################################################################################
        # Align the short reads - no need to perform trimming
        ################################################################################################################################################################################################################################################
        
        for sample in options.pe_reads:
            
            # Copy raw data to output directory
            cmd = f"cp {sample}_1.fastq.gz {options.output_directory}/alignments/"
            os.system(cmd)
            cmd = f"cp {sample}_2.fastq.gz {options.output_directory}/alignments/"
            os.system(cmd)
            
            cmd = ""
            cmd += f" STAR "
            cmd += f" --runThreadN  {options.cpu} "
            cmd += f" --readFilesIn {options.output_directory}/alignments/{sample.split('/')[-1]}_1.fastq.gz {options.output_directory}/alignments/{sample.split('/')[-1]}_2.fastq.gz "
            cmd += f" --genomeDir {options.output_directory}/star_indices/{genome_reference.split('/')[-1]} "
            cmd += f" --outSAMtype SAM "
            cmd += f" --outFilterMultimapNmax 10000 " 
            cmd += f" --alignIntronMin 20  "
            cmd += f" --alignIntronMax 10000 "
            cmd += f" --readFilesCommand zcat "
            cmd += f" --limitBAMsortRAM 107374182400 "
            cmd += f" --alignEndsType Local " # ALLOWS soft clipping 
            cmd += f" --outSAMprimaryFlag AllBestScore "
            cmd += f" --outFilterScoreMinOverLread 0.7 "
            cmd += f" --outFilterMatchNminOverLread 0.7 "
            cmd += f" --outSAMattributes NH HI AS nM NM MD jM jI XS "
            cmd += f" --alignSJoverhangMin 8 " 
            cmd += f" --outFileNamePrefix {options.output_directory}/alignments/{sample.split('/')[-1]}_{genome_reference.split('/')[-1]}_"
            cmd += f" 1> {options.output_directory}/alignments/{sample.split('/')[-1]}_{genome_reference.split('/')[-1]}.output "
            cmd += f" 2> {options.output_directory}/alignments/{sample.split('/')[-1]}_{genome_reference.split('/')[-1]}.error "
            if framework_of_choice == "docker":
                pass
            else:
                software = "star"
                version = list_of_softwares_with_versions[software]
                runSingularityCommand(logging, 
                                      "STAR", 
                                      version, 
                                      image_location = f"{options.output_directory}/singularity_images/{software}:{version}", 
                                      container_name = f"star_mapping_{genome_reference.split('/')[-1]}", 
                                      volumes = volumes_list,
                                      command = cmd, 
                                      cpus = options.cpu, 
                                      memory = '100g')
            os.system(f"rm {options.output_directory}/alignments/{sample.split('/')[-1]}_1.fastq.gz {options.output_directory}/alignments/{sample.split('/')[-1]}_2.fastq.gz")
            
            if options.transfer:
                cmd = f"mv {options.output_directory}/alignments/{sample.split('/')[-1]}_* {options.temp_directory}/alignments/"
                os.system(cmd)
        
        # Remove reference after mapping is complete
        if options.transfer:
            cmd = f"rm {options.output_directory}/star_indices/{genome_reference.split('/')[-1]}"
            os.system(cmd)


if __name__ == "__main__":
    main()
